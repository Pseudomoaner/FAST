function [exportData,axHands] = plotCartouche(procTracks,plotSettings,root,axHand)
%PLOTCARTOUCHE plots series of images of cells in the 'cartouche' format.
%
%   INPUTS:
%       -procTracks: Tracks, generated by the diffusionTracker.m script
%       -plotSettings: Settings for plotting, generated by the user within
%       the plotting GUI
%       -root: A string specifying the root directory for the current
%       analysis
%       -axHand: A handle to the axis that the axis that you wish to be
%       plotting into.
%
%   OUTPUTS:
%       -exportData: image data, in the form of a tx1 cell array for each
%       channel with each cell containing a single image of the specified
%       object.
%       -axHands: Handles to each of the subaxes generated by this
%       function, each corresponding to a separate channel.
%
%   Author: Oliver J. Meacock, (c) 2019

axHand.Box = 'off';

borderWidth = 2;
bufferWidth = 6;

%Start by figuring out how big a box you'll need to cut out from each frame, and where you should cut it out from
plotTrack = procTracks(plotSettings.edit1); %edit1 is the track ID input
xs = round(plotTrack.x(plotSettings.edit2:plotSettings.edit2+plotSettings.edit3-1)./plotSettings.pixSize); %edit2 is the requested start frame, edit3 is the track length
ys = round(plotTrack.y(plotSettings.edit2:plotSettings.edit2+plotSettings.edit3-1)./plotSettings.pixSize);
Lens = plotTrack.majorLen(plotSettings.edit2:plotSettings.edit2+plotSettings.edit3-1)./plotSettings.pixSize;
Wids = plotTrack.minorLen(plotSettings.edit2:plotSettings.edit2+plotSettings.edit3-1)./plotSettings.pixSize;
Phis = plotTrack.phi(plotSettings.edit2:plotSettings.edit2+plotSettings.edit3-1);
Frames = plotTrack.times(plotSettings.edit2:plotSettings.edit2+plotSettings.edit3-1);

%Update Phis so it wraps around properly
Phis = wrapAngleTimecourse(Phis);

%Figure out how many channels there are
chanNo = 0;
dirNames = dir(root);
for i = 1:size(dirNames,1)
    if ~isempty(regexp(dirNames(i).name,'Channel_\d','ONCE'))
        chanNo = chanNo + 1;
    end
end

exportData = cell(chanNo + 1,1);

folderNames = {'Segmentations'};
titleNames = {'Segmentation'};
exportData{1} = cell(plotSettings.edit3,1);
for i = 1:chanNo
    folderNames = [folderNames;['Channel_',num2str(i)]];
    titleNames = [titleNames;['Channel ',num2str(i)]];
    exportData{i+1} = cell(plotSettings.edit3,1);
end

%Check4 is the choice of whether to rotate all the cells to align them or not.
if plotSettings.check4
    xWindowStage1 = ceil(max(Lens) + max(Wids) + bufferWidth);
    yWindowStage1 = ceil(max(Lens) + max(Wids) + bufferWidth);
    
    %Find the half window size
    xHalfWindowStage1 = floor(xWindowStage1/2);
    yHalfWindowStage1 = floor(yWindowStage1/2);
    xWindowStage1 = xHalfWindowStage1*2 + 1;
    yWindowStage1 = yHalfWindowStage1*2 + 1;
    
    xWindowStage2 = ceil(max(Wids) + bufferWidth);
    yWindowStage2 = ceil(max(Lens) + bufferWidth);
    
    xHalfWindowStage2 = floor(xWindowStage2/2);
    yHalfWindowStage2 = floor(yWindowStage2/2);
    xWindowStage2 = xHalfWindowStage2*2 + 1;
    yWindowStage2 = yHalfWindowStage2*2 + 1;
    
    %Initialize the frames
    for i = 1:size(folderNames,1)
        imgSet{i} = zeros(yWindowStage2 + 2*borderWidth,(xWindowStage2+borderWidth) * plotSettings.edit3 + borderWidth);
    end
    
    for i = 1:plotSettings.edit3 
        %We're going to chop out two images. The first is centred on the object and assume it can take any orientation. We rotate this and chop out the final cell from the rotated image.
        xMinStage1 = max(1,xs(i) - xHalfWindowStage1);
        xUnderhang = -(xs(i) - xHalfWindowStage1 - 1);
        xMaxStage1 = min(round(plotSettings.maxX/plotSettings.pixSize),xs(i) + xHalfWindowStage1);
        xOverhang = (xs(i) + xHalfWindowStage1) - round(plotSettings.maxX/plotSettings.pixSize);
        yMinStage1 = max(1,ys(i) - yHalfWindowStage1);
        yUnderhang = -(ys(i) - yHalfWindowStage1 - 1);
        yMaxStage1 = min(round(plotSettings.maxY/plotSettings.pixSize),ys(i) + yHalfWindowStage1);
        yOverhang = (ys(i) + yHalfWindowStage1) - round(plotSettings.maxY/plotSettings.pixSize);
        
        xMinStage2 = xHalfWindowStage1 - xHalfWindowStage2 + 1;
        xMaxStage2 = xHalfWindowStage1 + xHalfWindowStage2 + 2;
        yMinStage2 = yHalfWindowStage1 - yHalfWindowStage2 + 1;
        yMaxStage2 = yHalfWindowStage1 + yHalfWindowStage2 + 2;
        
        xMinGlob = (xWindowStage2 + borderWidth) * (i-1) + 1 + borderWidth;
        xMaxGlob = (xWindowStage2 + borderWidth) * (i-1) + 1 + borderWidth + xWindowStage2;
        yMinGlob = borderWidth + 1;
        yMaxGlob = borderWidth + 1 + yWindowStage2;
        
        for j = 1:size(folderNames,1)
            imgFull = imread([root,filesep,folderNames{j},filesep,sprintf('Frame_%04d.tif',Frames(i)-1)]);
            stage1 = imgFull(yMinStage1:yMaxStage1,xMinStage1:xMaxStage1);
            %Pad the cropped image to full size, if the crop window is smaller than it should be in any direction
            if xUnderhang > 0
                stage1 = [zeros(size(stage1,1),xUnderhang),stage1];
            end
            if xOverhang > 0
                stage1 = [stage1,zeros(size(stage1,1),xOverhang)];
            end
            if yUnderhang > 0
                stage1 = [zeros(yUnderhang,size(stage1,2));stage1];
            end
            if yOverhang > 0
                stage1 = [stage1;zeros(yOverhang,size(stage1,2))];
            end
            rotStage = imrotate(stage1,90-Phis(i),'bilinear','crop');
            stage2 = rotStage(yMinStage2:yMaxStage2,xMinStage2:xMaxStage2);
            imgSet{j}(yMinGlob:yMaxGlob,xMinGlob:xMaxGlob) = stage2;
            exportData{j}{i} = stage2;
        end
    end
else
    xLens = abs(Lens.*cosd(Phis)); %Projection of the length along the x direction
    yLens = abs(Lens.*sind(Phis)); %Likewise for y axis
    
    %Find the biggest projection in both directions, and add a narrow buffer
    xWindow = ceil(max(xLens) + bufferWidth);
    yWindow = ceil(max(yLens) + bufferWidth);
    
    %Find the half window size
    xHalfWindow = floor(xWindow/2);
    yHalfWindow = floor(yWindow/2);
    xWindow = xHalfWindow*2 + 1;
    yWindow = yHalfWindow*2 + 1;
    
    %Initialize the frames
    for i = 1:size(folderNames,1)
        imgSet{i} = zeros(yWindow + 2*borderWidth,(xWindow+borderWidth) * plotSettings.edit3 + borderWidth);
    end
    
    for i = 1:plotSettings.edit3
        xMin = max(1,xs(i) - xHalfWindow);
        xUnderhang = -(xs(i) - xHalfWindow - 1);
        xMax = min(round(plotSettings.maxX/plotSettings.pixSize),xs(i) + xHalfWindow);
        xOverhang = (xs(i) + xHalfWindow) - round(plotSettings.maxX/plotSettings.pixSize);
        yMin = max(1,ys(i) - yHalfWindow);
        yUnderhang = -(ys(i) - yHalfWindow - 1);
        yMax = min(round(plotSettings.maxY/plotSettings.pixSize),ys(i) + yHalfWindow);
        yOverhang = (ys(i) + yHalfWindow) - round(plotSettings.maxY/plotSettings.pixSize);
        
        xMinGlob = (xWindow + borderWidth) * (i-1) + 1 + borderWidth;
        xMaxGlob = (xWindow + borderWidth) * (i-1) + borderWidth + xWindow;
        yMinGlob = borderWidth + 1;
        yMaxGlob = borderWidth + yWindow;
        
        for j = 1:size(folderNames,1)
            imgFull = imread([root,filesep,folderNames{j},filesep,sprintf('Frame_%04d.tif',Frames(i)-1)]);
            stage1 = imgFull(yMin:yMax,xMin:xMax);
            %Pad the cropped image to full size, if the crop window is smaller than it should be in any direction
            if xUnderhang > 0
                stage1 = [zeros(size(stage1,1),xUnderhang),stage1];
            end
            if xOverhang > 0
                stage1 = [stage1,zeros(size(stage1,1),xOverhang)];
            end
            if yUnderhang > 0
                stage1 = [zeros(yUnderhang,size(stage1,2));stage1];
            end
            if yOverhang > 0
                stage1 = [stage1;zeros(yOverhang,size(stage1,2))];
            end
            imgSet{j}(yMinGlob:yMaxGlob,xMinGlob:xMaxGlob) = stage1;
            exportData{j}{i} = stage1;
        end
    end
end

subplot(axHand)

for i = 1:size(folderNames,1)
    axHands(i) = subplot(size(folderNames,1),1,i);
    imshow(imgSet{i},[],'Parent',axHands(i))
end

for i = 1:size(folderNames,1)
    pos = [0.33234,0.9434 - ((0.83351/size(folderNames,1))*i),0.62916,(0.83351/size(folderNames,1))];
    set(axHands(i),'Position',pos,'Units','normalized')
    title(axHands(i),titleNames{i})
end