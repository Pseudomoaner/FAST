function plotExport = plotRMSD(plotSubs,plotSettings,pGs,root,axHand)
%PLOTRMSD generates and plots the Root Mean Square Displacement (RMSD) for
%the input tracks.
%
%Options are:
%   Checkbox 1: Will plot data on log-log axes
%   Checkbox 2: Will draw a line with diffusive gradient
%   Checkbox 3: Will draw a line with ballistic gradient
%   Checkbox 4: Will cause all sapling points to be displayed
%
%   INPUTS:
%       -plotSubs: The sub-population(s) of track data that you want to 
%       plot. A 4x1 cell array, containing the specified data for all 
%       tracks (cell 1) and each individual sub-population (cells 2-4).
%       -plotSettings: Settings for plotting, generated by the user within
%       the plotting GUI
%       -pGs: Structure specifying the graphical settings you want to use
%       within this plot.
%       -axHand: A handle to the axis that you want to plot into.
%
%   OUTPUTS:
%       -plotExport: Data export - precise form depends on options selected
%       within plotSettings. In general, consists of 4 cells, each
%       containing a structure with data processed based on currently
%       selected options.
%
%   Author: Oliver J. Meacock (c) 2019

plotExport = cell(4,1);

hold(axHand,'on')
axHand.LineWidth = 2;
axHand.Box = 'on';

legCount = 1;
legNames = {};

maxRMSD = 0;
minRMSD = Inf;
maxT = 0;

for i = 1:size(plotSubs,1)
    Sums = zeros(plotSettings.maxF,1);
    Counts = zeros(plotSettings.maxF,1);
    for j = 1:size(plotSubs{i},2)
        for k = 1:length(plotSubs{i}(j).x) %Treat each sub-track as a separate track
            currCents = [plotSubs{i}(j).x(k:end),plotSubs{i}(j).y(k:end)];
            currTimes = plotSubs{i}(j).times(k:end); %Time indices, rather than real (minute) values.
            currTimes = currTimes - currTimes(1) + 1; %Center time points on start of track.
            
            currXDisps = currCents(:,1) - currCents(1,1);
            currYDisps = currCents(:,2) - currCents(1,2);
            
            Sums(currTimes) = Sums(currTimes) + currXDisps.^2 + currYDisps.^2;
            Counts(currTimes) = Counts(currTimes) + 1;
        end
    end
    Rmsd = sqrt(Sums./Counts);
    times = linspace(0,plotSettings.maxF*plotSettings.dt,plotSettings.maxF);
    
    plotExport{i}.RMSD = Rmsd;
    plotExport{i}.times = times;
    
    if max(Rmsd) > maxRMSD
        [maxRMSD,maxRInd] = max(Rmsd);
        maxRMSDt = times(maxRInd);
    end
    if min(Rmsd) < minRMSD
        minRMSD = min(Rmsd);
    end
    
    notNanRmsd = find(~isnan(Rmsd));
    if max(times(notNanRmsd)) > maxT
        maxT = max(times(notNanRmsd));
    end
    
    if plotSettings.check4 == 1 && sum(isnan(Rmsd)) ~= numel(Rmsd) %Corresponds to user request for viewing sampling
        legH(legCount) = plot(axHand,times,Rmsd,pGs.pointStyles{i},'Color',pGs.plotColours{i},'MarkerSize',15);
        legNames = [legNames;pGs.popTags{i}];
        legCount = legCount + 1;
    elseif sum(isnan(Rmsd)) ~= numel(Rmsd)
        legH(legCount) = plot(axHand,times,Rmsd,pGs.lineStyles{i},'Color',pGs.plotColours{i},'LineWidth',2);
        legNames = [legNames;pGs.popTags{i}];
        legCount = legCount + 1;
    end
end

if plotSettings.check2 == 1 %Corresponds to user request for ballistic plot
    minT = plotExport{1}.times(2);
    ballT = linspace(minT,maxT/5,100);
    
    ballRMSD = ballT * (maxRMSD/maxRMSDt);
    
    legH(legCount) = plot(axHand,ballT,ballRMSD,'--','LineWidth',2,'Color',[1,0,1]);
    legNames = [legNames;'Ballistic trajectory'];
    legCount = legCount + 1;
end

if plotSettings.check3 == 1 %Corresponds to user request for diffusive plot
    minT = plotExport{1}.times(2);
    diffT = linspace(minT,maxT/3,100);
    
    diffRMSD = sqrt(maxRMSD^2/maxRMSDt)*sqrt(diffT);
    
    legH(legCount) = plot(axHand,diffT,diffRMSD,'--','LineWidth',2,'Color',[0,1,1]);
    legNames = [legNames;'Diffusive trajectory'];
end
    
if plotSettings.check1 == 1 %Corresponds to user request for log-log axes
    axHand.XScale = 'log';
    axHand.YScale = 'log';
%     axis(axHand,'tight')
end

if plotSettings.legendSwitch == 1
    legend(legH,legNames)
end

[tSym,xSym] = getDimensionalSymbols(root);

xlabel(axHand,['Lag time / ', tSym{1}],'FontSize',15)
ylabel(axHand,['RMSD / ', xSym{1}],'FontSize',15)
hold(axHand,'off')