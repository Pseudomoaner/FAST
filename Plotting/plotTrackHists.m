function plotExport = plotTrackHists(plotSubs,plotSettings,pGs,axHand)
%PLOTTRACKHISTS generates a histogram (linear or circular) of the
%currently selected track-associated variable, for the currently selected
%tracks.
%
%Options are:
%   Checkbox 1: Will treat the variable as circular (assuming input in
%   radians) - i.e. will plot as a rose plot in place of a standard
%   histogram.
%   Checkbox 2: Will perform t-tests between currently selected
%   populations, allowing you to assess if their values of the currently
%   selected variable are significantly different
%   Checkbox 3: Will use the mean of each track, in place of treating each
%   datapoint within the track as independent
%
%   INPUTS:
%       -plotSubs: The sub-population(s) of track data that you want to 
%       plot. A 4x1 cell array, containing the specified data for all 
%       tracks (cell 1) and each individual sub-population (cells 2-4).
%       -plotSettings: Settings for plotting, generated by the user within
%       the plotting GUI
%       -pGs: Structure specifying the graphical settings you want to use
%       within this plot.
%       -axHand: A handle to the axis that you want to plot into.
%
%   OUTPUTS:
%       -exportData: Data export - precise form depends on options selected
%       within plotSettings. In general, consists of 4 cells, each
%       containing a structure with data processed based on currently
%       selected options.
%
%   Author: Oliver J. Meacock (c) 2019

plotExport = cell(4,1);

hold(axHand,'on')
axHand.LineWidth = 2;
axHand.Box = 'on';

histCount = 1;
legNames = {};
for i = 1:size(plotSubs,1)
    dataCollection = [];
    for j = 1:size(plotSubs{i},2)
        if plotSettings.check3 %User requests use of track means (rather than all points in track)
            if plotSettings.check1 %Use circular mean for circular data
                dataCollection = [dataCollection;circ_mean(deg2rad(plotSubs{i}(j).(plotSettings.data1)))];
            else
                dataCollection = [dataCollection;mean(plotSubs{i}(j).(plotSettings.data1))];
            end
        else
            if plotSettings.check1
                dataCollection = [dataCollection;deg2rad(plotSubs{i}(j).(plotSettings.data1))];
            else
                dataCollection = [dataCollection;plotSubs{i}(j).(plotSettings.data1)];
            end
        end
    end
    
    plotExport{i}.data = dataCollection;
    
    if plotSettings.check1 && ~isempty(dataCollection)
        h(histCount) = rose(axHand,dataCollection);
        h(histCount).Color = pGs.plotColours{i};
        histCount = histCount + 1;
        legNames = [legNames;[pGs.popTags{i},' Radians']];
    elseif ~isempty(dataCollection)
        h(histCount) = histogram(axHand,dataCollection,'faceColor',pGs.plotColours{i});
        h(histCount).EdgeColor = pGs.plotColours{i};
        h(histCount).Normalization = 'pdf';
        histCount = histCount + 1;
        legNames = [legNames;pGs.popTags{i}];
    end
end

if plotSettings.check2 == 1 %check2 corresponds to request for t-test results
    %Calculate means first
    if ~isempty(plotExport{2}.data)
        if plotSettings.check1 == 1
            pop1Mean = circ_mean(plotExport{2}.data);
        else
            pop1Mean = mean(plotExport{2}.data);
        end
        text(0.01,0.98,['Pop1 mean = ',num2str(pop1Mean)],'Units','normalized','Color',pGs.plotColours{2},'FontSize',15)
        plotExport{2}.mu = pop1Mean;
    end
    if ~isempty(plotExport{3}.data)
        if plotSettings.check1 == 1
            pop2Mean = circ_mean(plotExport{3}.data);
        else
            pop2Mean = mean(plotExport{3}.data);
        end
        text(0.01,0.95,['Pop2 mean = ',num2str(pop2Mean)],'Units','normalized','Color',pGs.plotColours{3},'FontSize',15)
        plotExport{3}.mu = pop2Mean;
    end
    if ~isempty(plotExport{4}.data)
        if plotSettings.check1 == 1
            pop3Mean = circ_mean(plotExport{4}.data);
        else
            pop3Mean = mean(plotExport{4}.data);
        end
        text(0.01,0.92,['Pop3 mean = ',num2str(pop3Mean)],'Units','normalized','Color',pGs.plotColours{4},'FontSize',15)
        plotExport{4}.mu = pop3Mean;
    end
    
    if ~isempty(plotExport{2}.data) && ~isempty(plotExport{3}.data) %Compare populations 1 and 2
        if plotSettings.check1 == 1
            p = circ_wwtest(plotExport{2}.data,plotExport{3}.data);
        else
            [~,p] = ttest2(plotExport{2}.data,plotExport{3}.data);
        end
        text(0.01,0.89,['1 vs 2: p = ',num2str(p)],'Units','normalized','Color',mean([pGs.plotColours{2};pGs.plotColours{3}]),'FontSize',15)
        plotExport{2}.OnevTwo = p;
        plotExport{3}.OnevTwo = p;
    end
    if ~isempty(plotExport{3}.data) && ~isempty(plotExport{4}.data) %Compare populations 1 and 2
        if plotSettings.check1 == 1
            p = circ_wwtest(plotExport{3}.data,plotExport{4}.data);
        else
            [~,p] = ttest2(plotExport{3}.data,plotExport{4}.data);
        end
        text(0.01,0.86,['2 vs 3: p = ',num2str(p)],'Units','normalized','Color',mean([pGs.plotColours{3};pGs.plotColours{4}]),'FontSize',15)
        plotExport{3}.TwovThree = p;
        plotExport{4}.TwovThree = p;
    end
    if ~isempty(plotExport{2}.data) && ~isempty(plotExport{4}.data) %Compare populations 1 and 2
        if plotSettings.check1 == 1
            p = circ_wwtest(plotExport{2}.data,plotExport{4}.data);
        else
            [~,p] = ttest2(plotExport{2}.data,plotExport{4}.data);
        end
        text(0.01,0.83,['1 vs 3: p = ',num2str(p)],'Units','normalized','Color',mean([pGs.plotColours{2};pGs.plotColours{4}]),'FontSize',15)
        plotExport{2}.OnevThree = p;
        plotExport{3}.OnevThree = p;
    end
end

if plotSettings.check1 == 1
    grid(axHand,'off')
    xlabel(axHand,'Count','FontSize',15)
    ylabel(axHand,'Count','FontSize',15)
    axis(axHand,'equal')
else
    maxBinWidth = 0;
    for i = 1:size(h,2)
        if h(i).BinWidth > maxBinWidth
            maxBinWidth = h(i).BinWidth;
        end
    end
    for i = 1:size(h,2)
        h(i).BinWidth = maxBinWidth;
    end
    xlabel(axHand,plotSettings.data1,'FontSize',15,'Interpreter','none')
    ylabel(axHand,'PDF','FontSize',15)
end

if plotSettings.legendSwitch == 1
    legend(h,legNames)
end
hold(axHand,'off')