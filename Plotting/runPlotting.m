function [plotExport,axHand] = runPlotting(procTracks,plotSettings,root,axHand,figHand)
%RUNPLOTTING performs the specified plotting algorithm on the target axes,
%using the specified data. Designed to be used in the Plotting portion of
%the FAST GUI.
%   
%   INPUTS:
%       -procTracks: Track data, generated by the diffusionTracker.m GUI
%       -plotSettings: Settings specified within the plotting GUI, with
%       fields specifying plot type, data ranges etc.
%       -root: String specifying the root directory of the current analysis
%       -axHand: Handle specifying the axes that the current plot should be
%       performed within
%       -figHand: Handle specifying the figure that the current plot should
%       be performed within. Used in place of the axis handle for some
%       multi-axis plots.
%
%   OUTPUTS:
%       -plotExport: Data structure specific to the plotting algorithm
%       used. Provides partially processed data to permit recreation of 
%       plots generated within the plotting GUI, but with the greater
%       flexibility that the command line affords.
%       -axHand: Handle to axes into which plots have been inserted.
%       Modified when creating multi-axis plots, otherwise equal to the 
%       input handle.
%
%   Author: Oliver J. Meacock, (c) 2019

plotGraphics.plotColours = plotSettings.plotColours;
plotGraphics.popTags = plotSettings.popTags;
plotGraphics.lineStyles = {'-','-','-','-'};
plotGraphics.pointStyles = {'.','.','.','.'};

delete(axHand)

axHand = axes(figHand,'Position',[0.33234,0.10987,0.62916,0.83351],'Units','normalized');
grid(axHand,'on')
axis(axHand,'normal')
axHand.XScale = 'linear';
axHand.YScale = 'linear';
legend off;

plotSubdivisions = cell(4,1);
if plotSettings.showAll
    for i = 1:size(procTracks,2)
        plotSubdivisions{1} = [plotSubdivisions{1},procTracks(i)];
    end
end
if plotSettings.show1
    for i = 1:size(procTracks,2)
        if procTracks(i).population == 1
            plotSubdivisions{2} = [plotSubdivisions{2},procTracks(i)];
        end
    end
end
if plotSettings.show2
    for i = 1:size(procTracks,2)
        if procTracks(i).population == 2
            plotSubdivisions{3} = [plotSubdivisions{3},procTracks(i)];
        end
    end
end
if plotSettings.show3
    for i = 1:size(procTracks,2)
        if procTracks(i).population == 3
            plotSubdivisions{4} = [plotSubdivisions{4},procTracks(i)];
        end
    end
end

switch plotSettings.plotType
    case 'RMSD'
        plotExport = plotRMSD(plotSubdivisions,plotSettings,plotGraphics,root,axHand);
    case 'Timecourse'
        plotExport = plotTimecourse(plotSubdivisions,plotSettings,plotGraphics,root,axHand);
    case 'Histograms'
        plotExport = plotTrackHists(plotSubdivisions,plotSettings,plotGraphics,root,axHand);
    case 'Phase space'
        plotExport = plotPhaseSpace(plotSubdivisions,plotSettings,plotGraphics,root,axHand);
    case 'Joint distribution'
        plotExport = plotJointDistribution(plotSubdivisions,plotSettings,plotGraphics,root,axHand);
    case '2D histogram'
        plotExport = plot2DHistogram(plotSubdivisions,plotSettings,plotGraphics,root,axHand);
    case 'Event centred average'
        plotExport = plotEventAverage(plotSubdivisions,plotSettings,plotGraphics,root,axHand);
    case 'Division centred average'
        plotExport = plotDivisionAverage(plotSubdivisions,plotSettings,plotGraphics,root,axHand);
    case 'Choose plot type'
        plotExport = [];
    case 'Cartouche'
        [plotExport,axHand] = plotCartouche(procTracks,plotSettings,root,axHand);
    case 'Kymograph'
        [plotExport,axHand] = plotKymograph(procTracks,plotSettings,root,axHand);
end