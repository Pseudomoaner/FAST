function plotExport = plotEventAverage(plotSubs,plotSettings,pGs,axHand)
%PLOTEVENTAVERAGE plots the average of many different tracks, centred upon
%a user-specified event. Events should be stored within the 'event' field
%of the procTracks structure.
%
%For more details on events, see:
%   https://mackdurham.group.shef.ac.uk/FAST_DokuWiki/dokuwiki/doku.php?id=usage:advanced_usage#population_and_event_labelling
%
%   INPUTS:
%       -plotSubs: The sub-population(s) of track data that you want to 
%       plot. A 4x1 cell array, containing the specified data for all 
%       (cell 1) and each individual (cells 2-4) sub-population.
%       -plotSettings: Settings for plotting, generated by the user within
%       the plotting GUI
%       -pGs: Structure specifying the graphical settings you want to use
%       within this plot.
%       -axHand: A handle to the axis that you want to plot into.
%
%   OUTPUTS:
%       -exportData: Data export - precise form depends on options selected
%       within plotSettings. In general, consists of 4 cells, each
%       containing a structure with data processed based on currently
%       selected options.

plotExport = cell(4,1);

hold(axHand,'on')
axHand.LineWidth = 2;
axHand.Box = 'on';

legCount = 1;
legNames = {};

for i = 1:size(plotSubs,1)
    maxLen = 0;
    eventSum = 0;
    for j = 1:size(plotSubs{i},2)
        if max(plotSubs{i}(j).times) - min(plotSubs{i}(j).times) > maxLen
            maxLen = max(plotSubs{i}(j).times) - min(plotSubs{i}(j).times);
        end
        eventSum = eventSum + sum(plotSubs{i}(j).event == plotSettings.edit1);
    end
    
    eventFrame = NaN(eventSum,maxLen*2 + 1); %Event occurs at index maxLen + 1
    
    eventCount = 1;
    for j = 1:size(plotSubs{i},2)
        eventInds = plotSubs{i}(j).event == plotSettings.edit1;
        eventTimes = plotSubs{i}(j).times(eventInds);
        for k = 1:size(eventTimes,2)
            %Shift track times so event time falls at index maxLen + 1
            eventCentT = plotSubs{i}(j).times(1:size(plotSubs{i}(j).(plotSettings.data1),1)) - eventTimes(k) + maxLen + 1;
            eventFrame(eventCount,eventCentT) = plotSubs{i}(j).(plotSettings.data1);
            eventCount = eventCount + 1;
        end
    end
    timeVals = (-maxLen:maxLen)*plotSettings.dt;
    
    dataMeans = nanmean(eventFrame,1);
    nanMeans = isnan(dataMeans);
    timeVals(nanMeans) = [];
    dataMeans(nanMeans) = [];
    
    if plotSettings.check3 == 1 && ~isempty(eventFrame) %Corresponds to showing all traces (vs. just the mean trace)
        plotExport{i}.subTimes = cell(size(plotSubs{i},2),1);
        plotExport{i}.subData = cell(size(plotSubs{i},2),1);
        for j = 1:size(eventFrame,1)
            notNanInds = ~isnan(eventFrame(j,~nanMeans));
            subTimes = timeVals(notNanInds);
            tmpData = eventFrame(j,~nanMeans);
            subData = tmpData(notNanInds);
            if j == 1
                legH(legCount) = plot(axHand,subTimes,subData,pGs.lineStyles{i},'Color',pGs.plotColours{i},'LineWidth',0.5);
                legNames = [legNames;pGs.popTags{i}];
                legCount = legCount + 1;
            else
                plot(axHand,subTimes,subData,pGs.lineStyles{i},'Color',pGs.plotColours{i},'LineWidth',0.5)
            end
            
            plotExport{i}.subTimes{j} = subTimes;
            plotExport{i}.subData{j} = subData;
        end
    elseif ~isempty(eventFrame)
        legH(legCount) = plot(axHand,timeVals,dataMeans,pGs.lineStyles{i},'Color',pGs.plotColours{i},'LineWidth',2);
        legNames = [legNames;[pGs.popTags{i},' mean']];
        legCount = legCount + 1;
        
        plotExport{i}.dataMeans = dataMeans;
        plotExport{i}.times = timeVals;
    end
    
    if plotSettings.check2 == 1 && ~isempty(dataMeans) %check1 corresponds to error area showing
        dataStd = nanstd(eventFrame,0,1);
        dataStd(isnan(dataStd)) = [];
        
        areaY = [dataMeans'-dataStd',2*dataStd'];
        
        h = area(timeVals',areaY,'EdgeColor','none');
        h(1).FaceColor = [1,1,1];
        h(2).FaceColor = pGs.plotColours{i};
        h(1).FaceAlpha = 0;
        h(2).FaceAlpha = 0.5;
        
        legH(legCount) = h(2);
        legNames = [legNames;[pGs.popTags{i},' s.d.']];
        legCount = legCount + 1;
        
        plotExport{i}.dataStd = dataStd;
    end
    
end

if plotSettings.legendSwitch == 1
    legend(legH,legNames)
end
xlabel(axHand,'Time relative to event','FontSize',15)
ylabel(axHand,plotSettings.data1,'FontSize',15,'Interpreter','none')
hold(axHand,'off')