function [] = runDivisionsBatch(root,divisionSettings)
%RUNDIVISIONSBATCH applies the specified division detection settings the
%the dataset located in the input root directory.
%
%   INPUTS:
%       -root: String defining the location of the target root
%       directory.
%       -divisionSettings: Settings structure generated by the FAST GUI.
%       Typically stored within the 'Tracks.mat' file of a given dataset.
%
%   Author: Oliver J. Meacock (c) 2019

tracksPath = [root,filesep,'Tracks.mat'];

load(tracksPath)

%Get the feature statistics and formatted feature matrices
[linkStats,tgtMat,pred1Mat,pred2Mat,featureStruct] = gatherDivisionStats(procTracks,divisionSettings);

%Do the division detection itself - optimise inclusion threshold
maxLoops = 10; %Number of loops you should try optimising over
maxWorking = 0;
minNotWorking = inf;
incRad = 3;

progressbar(0);

for i = 1:maxLoops
    [linkArray1,linkArray2,acceptDiffs,rejectDiffs] = doDivisionLinkingRedux(tgtMat,pred1Mat,pred2Mat,linkStats,incRad,true);
    
    try
        procTracks = addDivisionLinks(procTracks,linkArray1,linkArray2);
        maxWorking = incRad;
    catch ME
        if (strcmp(ME.identifier,'MATLAB:lang:StackOverflow'))
            minNotWorking = incRad;
        else
            rethrow(ME)
        end
    end
    incRad = (minNotWorking+maxWorking)/2;
    
    progressbar(i/(maxLoops+1))
end

[linkArray1,linkArray2,acceptDiffs,rejectDiffs] = doDivisionLinkingRedux(tgtMat,pred1Mat,pred2Mat,linkStats,maxWorking,true);
procTracks = addDivisionLinks(procTracks,linkArray1,linkArray2);

%Save a backup copy of the raw tracks if one doesn't already exist
if ~exist([root,filesep,'Pre-division_Tracks.mat'],'file')
    copyfile([root,filesep,'Tracks.mat'],[root,filesep,'Pre-division_Tracks.mat'])
end

%Get lineage sizes to remove small ones
linCount = 0;
for i = 1:size(procTracks,2)
    if isempty(procTracks(i).M) %If this is the founder of a lineage
        linCount = linCount + 1;
    end
end

linSizes = zeros(linCount,1);
Ms = zeros(linCount,1);
sInd = 1;
for i = 1:size(procTracks,2)
    if isempty(procTracks(i).M) %If cell has no mother, call it the founder of a new lineage
        linSizes(sInd) = size(getLineageIndices(procTracks,i,0),1);
        Ms(sInd) = i;
        sInd = sInd + 1;
    end
end

%Update your tracks to get rid of ones that are part of small lineages
badMs = Ms(linSizes < divisionSettings.minInc);

%Generate list of tracks that are within small lineages
badTs = [];
for i = 1:size(badMs,1)
    [linInds,~] = getLineageIndices(procTracks,badMs(i),1);
    badTs = [badTs;linInds];
end
delTs = unique(badTs); %Throws in sorting for free

%Need to update the tracks the mother and daughter IDs point to.
for i = 1:size(procTracks,2)
    if ~isempty(procTracks(i).M)
        procTracks(i).M = procTracks(i).M - sum(delTs < procTracks(i).M);
    end
    if ~isempty(procTracks(i).D1)
        procTracks(i).D1 = procTracks(i).D1 - sum(delTs < procTracks(i).D1);
    end
    if ~isempty(procTracks(i).D2)
        procTracks(i).D2 = procTracks(i).D2 - sum(delTs < procTracks(i).D2);
    end
end

%Clear the relevant parts of procTracks and fromMappings
procTracks(delTs) = [];
fromMappings(delTs) = [];

%Rejigging toMappings is a bit more tricky, given the deletion of the
%tracks in the above code causes the position of tracks below them in the
%data structure to shift.
for i = delTs'-(0:(size(delTs,1)-1)) %For each short track (weird indexing here accounts for the continual subtraction of one from each track index during each run through the loop)
    %Loop through slices, deleting and reindexing if track is too short
    for j = 1:size(toMappings,1) %For each 'slice'
        currID = toMappings{j}(:,1) == i;
        bigIDs = toMappings{j}(:,1) > i;
        if sum(currID) == 1 %If this track is present at this timepoint
            toMappings{j}(currID,:) = [NaN,NaN];
        end
        toMappings{j}(bigIDs,1) = toMappings{j}(bigIDs,1) - 1;
    end
end

save(tracksPath,'divisionSettings','toMappings','fromMappings','procTracks','-append')

progressbar(1)